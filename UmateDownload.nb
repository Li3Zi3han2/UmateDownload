(*清除定义*)
Clear["Global`*"];
VilidFileName[file_String]:=StringReplace[file,{"\\"->"＼","/"->"／",":"->"：","*"->"*","?"->"？","\""->""","<"->"《",">"->"》","|"->"丨"}];
ImportJSONFromURL[url_]:=ImportJSONFromURL[url,{}];
ImportJSONFromURL[url_,header_]:=ImportString[FromCharacterCode[URLRead[HTTPRequest[url,<|"Headers"->header|>]]["BodyBytes"],"Unicode"],"JSON"];
ImportStringFromURL[url_]:=ImportStringFromURL[url,{}];
ImportStringFromURL[url_,header_]:=Import[HTTPRequest[url,<|"Headers"->header|>],"Text"];
DownloadFileFromURL[url_,name_]:=DownloadFileFromURL[url,name,{}];
DownloadFileFromURL[url_,name_,header_]:=URLDownload[HTTPRequest[url,<|"Headers"->header|>],name];
FromJSONToDataset[json_]:=Dataset[ReplaceRepeated[json,List[kv__Rule]:>Association[kv]]];

(*下载某一作者最新的数个帖子*)
(*下载从第n1个到第n2个*)
UmateDownload[url_String/;StringMatchQ[url,"https://umate.me/personInfo/"~~__],dir_String,"圈子",{n1_Integer,n2_Integer}/;1<=n1<=n2]:=Module[
{pause,header,user,userAPI,userJSON,userDataset,postNumber,imageNumber,videoNumber,postPerPage,circleSlug,pageAPI,pageJSON,pageDataset,postJSON,postDataset,postSlug,date,name,imageURL,videoURL,m3u8URL,tsURL,videoFile,mylist,result},
(*设置暂停时长*)
pause=1;
(*恢复代理设置原始值*)
$DefaultProxyRules["UseProxy"]=Automatic;
(*创建输出目录*)
CreateDirectory[dir];
(*设置工作目录*)
SetDirectory[dir];
(*请求头，其中Authorization必需*)
header="-H \"Authorization: Bearer eyJ▮▮▮▮▮▮Ll8\"";
header=StringCases[header,"\""~~Shortest[key__]~~": "~~Shortest[value__]~~"\"":>(key->value)];
(*用户信息*)
user=StringExtract[url,"/"->-1];
userAPI=URLBuild[{"https://api.umate.me","api","circle","user_circle_list"},{"username"->user}];
userJSON=ImportJSONFromURL[userAPI,header];
userDataset=FromJSONToDataset[userJSON];
(*数量信息，目前只考虑第1个圈子*)
{postNumber,imageNumber,videoNumber}=ToExpression[Normal[Values[userDataset["data","data",1,{"post_num","image_num","video_num"}]]]];
postPerPage=6;
(*页面信息*)
circleSlug=userDataset["data","data",1,"circle_slug"];
(*如果文件存在，则导入文件*)
If[FileNames["page"~~Repeated[DigitCharacter,{8}]~~".json"]!={},
pageJSON=Import[FileNames["page"~~Repeated[DigitCharacter,{8}]~~".json"][[-1]]];
pageDataset=FromJSONToDataset[pageJSON]
];
(*如果文件不存在或帖子总数不相等，则更新文件*)
If[FileNames["page"~~Repeated[DigitCharacter,{8}]~~".json"]=={}||pageDataset[1,"data","total"]=!=postNumber,
pageJSON=Table[
Pause[pause];
pageAPI=URLBuild[{"https://api.umate.me","api","circle","circle_post_list"},{"circle_slug"->circleSlug,"page"->i}];
ImportJSONFromURL[pageAPI,header],
{i,1,\[LeftCeiling]postNumber/postPerPage\[RightCeiling]}
];
Export["page"<>DateString[Today,{"Year","Month","Day"}]<>".json",pageJSON];
pageDataset=FromJSONToDataset[pageJSON]
];
(*帖子信息*)
postJSON=Flatten[pageJSON[[All,3,2,2,2]],1];
postDataset=FromJSONToDataset[postJSON];
(*按创建时间从新到旧排序*)
postDataset=postDataset[ReverseSortBy[Slot["created_at"]&]];
(*下载帖子内容*)
result=Reap@
Table[
postSlug=postDataset[i,"post_slug"];
date=DateString[TimeZoneConvert[DateObject[postDataset[i,"created_at"],TimeZone->0],8],{"Year","Month","Day"}];
Check[
Which[
(*如果是图片帖*)
postDataset[i,"media_type"]==0,
(*图片链接列表*)
imageURL=Normal[postDataset[i,"media",Select[Slot["resource_type"]==0&],"paths","large"]];
(*依次下载*)
Table[
(*如果链接丢失*)
If[MissingQ[imageURL[[j]]],
(*那么生成空图片占位*)
name=IntegerString[postNumber+1-i,10,4]<>" - "<>date<>" - "<>postSlug<>" - "<>IntegerString[j,10,2]<>"（占位）.jpg";
Sow@File[Export[name,"","Text"]],
(*否则正常下载*)
name=IntegerString[postNumber+1-i,10,4]<>" - "<>date<>" - "<>postSlug<>" - "<>IntegerString[j,10,2]<>"."<>StringReplace[StringExtract[imageURL[[j]],"."->-1,"?"->1],"jpeg"->"jpg"];
Sow@DownloadFileFromURL[imageURL[[j]],name,header]
],
{j,1,Length[imageURL]}
];
(*保存文字内容*)
name=IntegerString[postNumber+1-i,10,4]<>" - "<>date<>" - "<>postSlug<>" - "<>IntegerString[Length[imageURL]+1,10,2]<>".txt";
Sow@File[Export[name,Normal[postDataset[i,{"title","content"}]]]],
(*如果是视频帖*)
postDataset[i,"media_type"]==1,
(*预览图片链接列表*)
imageURL=Normal[postDataset[i,"media",Select[Slot["resource_type"]==0&],"paths","large"]];
(*视频链接列表*)
videoURL=Normal[postDataset[i,"media",Select[Slot["resource_type"]==1&],"paths","medium"]];
(*依次下载*)
Table[
(*暂未发现有预览图片链接丢失的情况，以防万一*)
If[MissingQ[imageURL[[j]]],
name=IntegerString[postNumber+1-i,10,4]<>" - "<>date<>" - "<>postSlug<>" - "<>IntegerString[2 j-1,10,2]<>"（占位）.jpg";
Sow@File[Export[name,"","Text"]],
name=IntegerString[postNumber+1-i,10,4]<>" - "<>date<>" - "<>postSlug<>" - "<>IntegerString[2 j-1,10,2]<>"."<>StringReplace[StringExtract[imageURL[[j]],"."->-1,"?"->1],"jpeg"->"jpg"];
Sow@DownloadFileFromURL[imageURL[[j]],name,header]
];
(*最高画质m3u8链接*)
m3u8URL=StringCases[ImportStringFromURL[videoURL[[j]],header],m3u8:Except["\n"]..~~EndOfString:>StringTake[videoURL[[j]],StringPosition[videoURL[[j]],"/"][[-1,1]]]<>m3u8][[1]];
(*对应的ts链接列表*)
tsURL=StringCases[ImportStringFromURL[m3u8URL,header],ts:(Except["#"|"\n"]..~~".ts"):>StringTake[m3u8URL,StringPosition[m3u8URL,"/"][[-1,1]]]<>ts];
name=IntegerString[postNumber+1-i,10,4]<>" - "<>date<>" - "<>postSlug<>" - "<>IntegerString[2 j,10,2]<>".mp4";
(*也依次下载*)
videoFile=Table[
DownloadFileFromURL[tsURL[[k]],Directory[],header],
{k,1,Length[tsURL]}
];
(*构建*)
mylist=Export["mylist.txt",StringJoin["file '"<>#<>"'\n"&/@AbsoluteFileName/@videoFile]];
(*使用FFmpeg拼接视频*)
RunProcess[{"ffmpeg","-f","concat","-safe",0,"-i",mylist,"-c","copy",Directory[] <>"\\"<>name,"-y"}];
(*删除临时文件*)
DeleteFile[videoFile];
DeleteFile[mylist];
Sow@File[name],
{j,1,Length[imageURL]}
];
(*保存文字内容*)
name=IntegerString[postNumber+1-i,10,4]<>" - "<>date<>" - "<>postSlug<>" - "<>IntegerString[2 Length[imageURL]+1,10,2]<>".txt";
Sow@File[Export[name,Normal[postDataset[i,{"title","content"}]]]],
(*如果是文章帖*)
postDataset[i,"media_type"]==2,
(*保存文字内容*)
name=IntegerString[postNumber+1-i,10,4]<>" - "<>date<>" - "<>postSlug<>" - 01.txt";
Sow@File[Export[name,Normal[postDataset[i,{"title","content"}]]]],
(*其他*)
True,
Print["第"<>ToString[i]<>"个帖子类型不符。"]
],
(*如果有提示消息生成*)
Print["第"<>ToString[i]<>"个帖子下载出错，请重试！"]
],
{i,n1,Min[n2,postNumber]}
];
Return[result]
];
(*仅下载第n个*)
UmateDownload[url_String/;StringMatchQ[url,"https://umate.me/personInfo/"~~__],dir_String,"圈子",{n_Integer}/;n>=1]:=UmateDownload[url,dir,"圈子",{n,n}];
(*下载前n个，默认10^8个*)
UmateDownload[url_String/;StringMatchQ[url,"https://umate.me/personInfo/"~~__],dir_String,"圈子",n:(n_Integer/;n>=1):10^8]:=UmateDownload[url,dir,"圈子",{1,n}];
(*下载某一作者最新的数个帖子*)
(*下载从第n1个到第n2个*)
UmateDownload[url_String/;StringMatchQ[url,"https://umate.me/personInfo/"~~__],dir_String,"动态",{n1_Integer,n2_Integer}/;1<=n1<=n2]:=Module[
{pause,header,user,userAPI,userJSON,userDataset,postNumber,imageNumber,videoNumber,postPerPage,circleSlug,pageAPI,pageJSON,pageDataset,postJSON,postDataset,postSlug,date,name,imageURL,videoURL,m3u8URL,tsURL,videoFile,mylist,result},
(*设置暂停时长*)
pause=1;
(*恢复代理设置原始值*)
$DefaultProxyRules["UseProxy"]=Automatic;
(*创建输出目录*)
CreateDirectory[dir];
(*设置工作目录*)
SetDirectory[dir];
(*请求头，其中Authorization必需*)
header="-H \"Authorization: Bearer eyJ▮▮▮▮▮▮Ll8\"";
header=StringCases[header,"\""~~Shortest[key__]~~": "~~Shortest[value__]~~"\"":>(key->value)];
(*用户信息*)
user=StringExtract[url,"/"->-1];
userAPI=URLBuild[{"https://api.umate.me","api","user","center"},{"username"->user}];
userJSON=ImportJSONFromURL[userAPI,header];
userDataset=FromJSONToDataset[userJSON];
(*数量信息*)
{postNumber,imageNumber,videoNumber}=ToExpression[Normal[Values[userDataset["data","counter",{"post_count","trends_image_count","trends_video_count"}]]]];
postPerPage=10;
(*页面信息*)
circleSlug=userDataset["data","data",1,"circle_slug"];
(*如果文件存在，则导入文件*)
If[FileNames["trend"~~Repeated[DigitCharacter,{8}]~~".json"]!={},
pageJSON=Import[FileNames["trend"~~Repeated[DigitCharacter,{8}]~~".json"][[-1]]];
pageDataset=FromJSONToDataset[pageJSON]
];
(*如果文件不存在或帖子总数不相等，则更新文件*)
If[FileNames["trend"~~Repeated[DigitCharacter,{8}]~~".json"]=={}||pageDataset[1,"data","total"]=!=postNumber,
pageJSON=Table[
Pause[pause];
pageAPI=URLBuild[{"https://api.umate.me","api","post","trends_list"},{"username"->user,"page"->i}];
ImportJSONFromURL[pageAPI,header],
{i,1,\[LeftCeiling]postNumber/postPerPage\[RightCeiling]}
];
Export["trend"<>DateString[Today,{"Year","Month","Day"}]<>".json",pageJSON];
pageDataset=FromJSONToDataset[pageJSON]
];
(*帖子信息*)
postJSON=Flatten[pageJSON[[All,3,2,2,2]],1];
postDataset=FromJSONToDataset[postJSON];
(*按创建时间从新到旧排序*)
postDataset=postDataset[ReverseSortBy[Slot["created_at"]&]];
(*下载帖子内容*)
result=Reap@
Table[
postSlug=postDataset[i,"post_slug"];
date=DateString[TimeZoneConvert[DateObject[postDataset[i,"created_at"],TimeZone->0],8],{"Year","Month","Day"}];
Check[
Which[
(*如果是图片帖*)
postDataset[i,"media_type"]==0,
(*图片链接列表*)
imageURL=Normal[postDataset[i,"media",Select[Slot["resource_type"]==0&],"paths","large"]];
(*依次下载*)
Table[
(*如果链接丢失*)
If[MissingQ[imageURL[[j]]],
(*那么生成空图片占位*)
name=IntegerString[postNumber+1-i,10,4]<>" - "<>date<>" - "<>postSlug<>" - "<>IntegerString[j,10,2]<>"（占位）.jpg";
Sow@File[Export[name,"","Text"]],
(*否则正常下载*)
name=IntegerString[postNumber+1-i,10,4]<>" - "<>date<>" - "<>postSlug<>" - "<>IntegerString[j,10,2]<>"."<>StringReplace[StringExtract[imageURL[[j]],"."->-1,"?"->1],"jpeg"->"jpg"];
Sow@DownloadFileFromURL[imageURL[[j]],name,header]
],
{j,1,Length[imageURL]}
];
(*保存文字内容*)
name=IntegerString[postNumber+1-i,10,4]<>" - "<>date<>" - "<>postSlug<>" - "<>IntegerString[Length[imageURL]+1,10,2]<>".txt";
Sow@File[Export[name,Normal[postDataset[i,{"title","content"}]]]],
(*如果是视频帖*)
postDataset[i,"media_type"]==1,
(*预览图片链接列表*)
imageURL=Normal[postDataset[i,"media",Select[Slot["resource_type"]==0&],"paths","large"]];
(*视频链接列表*)
videoURL=Normal[postDataset[i,"media",Select[Slot["resource_type"]==1&],"paths","medium"]];
(*依次下载*)
Table[
(*暂未发现有预览图片链接丢失的情况，以防万一*)
If[MissingQ[imageURL[[j]]],
name=IntegerString[postNumber+1-i,10,4]<>" - "<>date<>" - "<>postSlug<>" - "<>IntegerString[2 j-1,10,2]<>"（占位）.jpg";
Sow@File[Export[name,"","Text"]],
name=IntegerString[postNumber+1-i,10,4]<>" - "<>date<>" - "<>postSlug<>" - "<>IntegerString[2 j-1,10,2]<>"."<>StringReplace[StringExtract[imageURL[[j]],"."->-1,"?"->1],"jpeg"->"jpg"];
Sow@DownloadFileFromURL[imageURL[[j]],name,header]
];
(*最高画质m3u8链接*)
m3u8URL=StringCases[ImportStringFromURL[videoURL[[j]],header],m3u8:Except["\n"]..~~EndOfString:>StringTake[videoURL[[j]],StringPosition[videoURL[[j]],"/"][[-1,1]]]<>m3u8][[1]];
(*对应的ts链接列表*)
tsURL=StringCases[ImportStringFromURL[m3u8URL,header],ts:(Except["#"|"\n"]..~~".ts"):>StringTake[m3u8URL,StringPosition[m3u8URL,"/"][[-1,1]]]<>ts];
name=IntegerString[postNumber+1-i,10,4]<>" - "<>date<>" - "<>postSlug<>" - "<>IntegerString[2 j,10,2]<>".mp4";
(*也依次下载*)
videoFile=Table[
DownloadFileFromURL[tsURL[[k]],Directory[],header],
{k,1,Length[tsURL]}
];
(*构建*)
mylist=Export["mylist.txt",StringJoin["file '"<>#<>"'\n"&/@AbsoluteFileName/@videoFile]];
(*使用FFmpeg拼接视频*)
RunProcess[{"ffmpeg","-f","concat","-safe",0,"-i",mylist,"-c","copy",Directory[] <>"\\"<>name,"-y"}];
(*删除临时文件*)
DeleteFile[videoFile];
DeleteFile[mylist];
Sow@File[name],
{j,1,Length[imageURL]}
];
(*保存文字内容*)
name=IntegerString[postNumber+1-i,10,4]<>" - "<>date<>" - "<>postSlug<>" - "<>IntegerString[2 Length[imageURL]+1,10,2]<>".txt";
Sow@File[Export[name,Normal[postDataset[i,{"title","content"}]]]],
(*如果是文章帖*)
postDataset[i,"media_type"]==2,
(*保存文字内容*)
name=IntegerString[postNumber+1-i,10,4]<>" - "<>date<>" - "<>postSlug<>" - 01.txt";
Sow@File[Export[name,Normal[postDataset[i,{"title","content"}]]]],
(*其他*)
True,
Print["第"<>ToString[i]<>"个帖子类型不符。"]
],
(*如果有提示消息生成*)
Print["第"<>ToString[i]<>"个帖子下载出错，请重试！"]
],
{i,n1,Min[n2,postNumber]}
];
Return[result]
];
(*仅下载第n个*)
UmateDownload[url_String/;StringMatchQ[url,"https://umate.me/personInfo/"~~__],dir_String,"动态",{n_Integer}/;n>=1]:=UmateDownload[url,dir,"动态",{n,n}];
(*下载前n个，默认10^8个*)
UmateDownload[url_String/;StringMatchQ[url,"https://umate.me/personInfo/"~~__],dir_String,"动态",n:(n_Integer/;n>=1):10^8]:=UmateDownload[url,dir,"动态",{1,n}];

UmateDownload["https://umate.me/personInfo/▮▮▮▮▮▮","D:\\▮▮▮▮▮▮","圈子",3]
UmateDownload["https://umate.me/personInfo/▮▮▮▮▮▮","D:\\▮▮▮▮▮▮","动态",4]
